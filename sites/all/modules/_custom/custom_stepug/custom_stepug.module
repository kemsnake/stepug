<?php

/**
 * Implements hook_menu().
 */
function custom_stepug_menu() {

  $items['robokassa/order/success'] = array(
    'title' => 'Successful payment',
    'page callback' => 'custom_stepug_robokassa_success',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['robokassa/order/fail'] = array(
    'title' => 'Unsuccessful payment',
    'page callback' => 'custom_stepug_robokassa_fail',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['transform_to_cart/%'] = array(
    'title' => 'Вернуть товар в корзину',
    'page callback' => 'transform_checkout_order_to_cart',
    'page arguments' => array(1),
    'access callback' => 'commerce_order_customer_order_edit_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Проверяет что заказ не в статусе корзина и пользователь может менять данный заказ
 */
function commerce_order_customer_order_edit_access($order_id) {
  $order = commerce_order_load($order_id);
  if (!$order) {
    return MENU_NOT_FOUND;
  }
  // If the order is in a shopping cart order status...
  if (in_array($order->status, array_keys(commerce_order_statuses(array('cart' => TRUE))))) {
    // Do not allow the customer to see the page.
    return FALSE;
  }

  // Otherwise fallback on normal order access.
  return commerce_order_access('update', $order);
}

function transform_checkout_order_to_cart ($order_id) {
  $order = commerce_order_load($order_id);
  if (!$order) {
    return MENU_NOT_FOUND;
  }

  $order->status = 'cart';
  commerce_order_save($order);
  drupal_set_message('Ваш заказ помещен обратно в корзину, теперь вы можете его отредактировать.');
  drupal_goto('cart');
}
/**
 * Implements hook_menu().
 */
function custom_stepug_menu_alter(&$items) {
  $items['user/%user/ulogin']['access callback'] =  'user_access';
  $items['user/%user/ulogin']['access arguments'] = array('administer users');
  $items['user/%user/ulogin/delete']['access callback'] =  'user_access';
  $items['user/%user/ulogin/delete']['access arguments'] = array('administer users');
}

/**
 * Success page callback handler.
 */
function custom_stepug_robokassa_success() {
  $build = array();
  if (isset($_POST['InvId']) && isset($_POST['OutSum']) && isset($_POST['SignatureValue'])) {
    $message = t('Thank you, payment successful. Order #@shop_order,<br />', array('@shop_order' => $_POST['InvId']));
    drupal_set_message($message, 'status');
    global $user;
    if ($user->uid > 0) {
      drupal_goto('user/' . $user->uid . '/orders');
    }
    else {
      drupal_goto('');
    }
  }
  else {
    $build = MENU_ACCESS_DENIED;
  }
  return $build;
}

/**
 * Fail page callback handler.
 */
function custom_stepug_robokassa_fail() {
  drupal_set_message(t('Payment unsuccessful!'), 'error');
  drupal_goto('');
}

function custom_stepug_form_alter(&$form, &$form_state, $form_id) {
  if (strstr($form_id, 'commerce_cart_add_to_cart_form') || $form_id == 'views_form_commerce_cart_form_default') {
    drupal_add_library('system', 'ui.spinner');
    $form['quantity']['#title'] = '';
    $form['quantity']['#size'] = 1;
    $form['submit']['#attributes']['class'] = array('btn', 'btn-default', 'btn-sm');
  }
  if($form_id == 'commerce_checkout_form_checkout') {
    $form['commerce_shipping']['shipping_service']['#ajax']['callback'] = 'custom_stepug_shipping_pane_service_details_refresh';
  }

  // делаем плэйсхолдер для поля поиска
  if ($form_id == 'search_api_page_search_form_product_search') {
    $form['keys_2']['#attributes']['placeholder'] = '';
    $form['keys_2']['#size'] = 15;
  }

  // убираем форму поиска со стрнацы с результатами. мы изем только по названию товара
  if ($form_id == 'search_form') {
    $form['#access'] = FALSE;
  }

  // убираем языковые настройки с формы редактирования и регистрации пользовтеля
  if ($form_id == 'user_register_form' || ($form_id == 'user_profile_form' && $form['#user_category'] == 'account')) {
    // скрываем языковые настройки от обычных пользователей
    if (!user_access('administer users')) {
      $form['locale']['#access'] = FALSE;
    }
  }
  if ($form_id == 'user_login') {
    $form['name']['#size'] = 55;
    $form['pass']['#size'] = 55;
  }
  if ($form_id == 'user_register_form') {
    $form['account']['name']['#size'] = 55;
    $form['account']['mail']['#size'] = 55;
  }
}

/**
 * Implement hook_module_implements_alter().
 */
function custom_stepug_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    // выполняем нащ хук в самом конце
    $group = $implementations['custom_stepug'];
    unset($implementations['custom_stepug']);
    $implementations['custom_stepug'] = $group;
  }
}

/**
 * Implement hook_block_info().
 */
function custom_stepug_block_info() {
  $blocks = array();
  $blocks['stepug_user_links'] = array(
    'info' => t('Stepug user links block'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implement hook_block_view().
 */
function custom_stepug_block_view($delta = '') {
  global $user;

  $block = array();
  switch ($delta) {
    case 'stepug_user_links':
      if ($user->uid) {
        $block['content'] = l($user->name, 'user/' . $user->uid) .' | ' . l(t('My orders'), 'user/' . $user->uid . '/orders') .' | ' . l(t('Log out'), 'user/logout');
      }
      break;
  }
  return $block;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function custom_stepug_ctools_plugin_directory($module, $plugin) {
  if ($module == 'addressfield') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_node_view().
 */
function custom_stepug_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'product_display') {
    if (isset($node->field_product['und'][0]['product_id']) && user_access('edit any commerce_product entity')) {
      $product_id = $node->field_product['und'][0]['product_id'];
      $node->content['field_product'][0]['edit_link'] = array(
        '#markup' => l(t('Edit product'), 'admin/commerce/products/' . $product_id . '/edit'),
        '#weight' => -1,
      );
    }
  }

}

function custom_stepug_commerce_checkout_page_info_alter(&$checkout_pages) {
  $checkout_pages['payment']['help'] = '<div class="checkout-help">' . t('Please wait. You will now be redirected to the payment server. If you are not redirected within 10 seconds, please click on the button below.') . '</div>';
}

/**
 * Invoked after a feed item has been saved.
 *
 * @param FeedsSource $source
 *  FeedsSource object that describes the source that is being imported.
 * @param $entity
 *   The entity object that has just been saved.
 * @param array $item
 *   The parser result for this entity.
 * @param int|null $entity_id
 *  The id of the current item which is going to be updated. If this is a new
 *  item, then NULL is passed.
 */
function custom_stepug_feeds_after_save(FeedsSource $source, $entity, $item, $entity_id) {
  global $user;
  // Product display
  $node = (object)array('type' => 'product_display');
  node_object_prepare($node);
  $node->title = $entity->title;
  $node->uid = $user->uid;
  $node->status = 0;
  $node->field_product[LANGUAGE_NONE][]['product_id'] = $entity->product_id;
  $node->language = LANGUAGE_NONE;
  node_save($node);
}

/**
 * Ajax callback: Returns the shipping details form elements that match the
 * currently selected shipping service.
 */
function custom_stepug_shipping_pane_service_details_refresh($form, &$form_state, $checkout_pane, $order) {
  // Get order from form
  list($order, $checkout_pane) = $form_state['build_info']['args'];

  // Load up to date order
  $order = commerce_order_load($order->order_id);

  // Get selected
  $service_name = $form['commerce_shipping']['shipping_service']['#default_value'];

  commerce_shipping_service_rate_order($service_name, $order);

  // Delete any existing shipping line items from the order.
  commerce_shipping_delete_shipping_line_items($order, TRUE);

  // Extract the unit price from the calculated rate.
  $rate_line_item = $order->shipping_rates[$service_name];
  $rate_line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $rate_line_item);
  $unit_price = $rate_line_item_wrapper->commerce_unit_price->value();

  // Create a new shipping line item with the calculated rate from the form.
  $line_item = commerce_shipping_line_item_new($service_name, $unit_price, $order->order_id, $rate_line_item->data, $rate_line_item->type);

  // Save and add the line item to the order.
  $new_line_item = commerce_shipping_add_shipping_line_item($line_item, $order, TRUE);
  commerce_order_save($order);

  // Update shipping form
  $commands[] = ajax_command_replace('#' . $form['commerce_shipping']['service_details']['#id'], render($form['commerce_shipping']['service_details']));

  // Update checkout cart review
  list($view_id, $display_id) = explode('|', variable_get('commerce_cart_contents_pane_view', 'commerce_cart_summary|default'));
  $commands[] = ajax_command_replace('.view-commerce-cart-summary', commerce_embed_view($view_id, $display_id, array($order->order_id)));

  /*if ($service_name == 'pickup') {
    $commands[] = ajax_command_css('#edit-customer-profile-shipping', array('display' => 'none'));
    //$commands[] = ajax_command_invoke('#edit-customer-profile-shipping input', 'removeClass', array('required'));
  }
  else {
    $commands[] = ajax_command_css('#edit-customer-profile-shipping', array('display' => 'block'));
    //$commands[] = ajax_command_invoke('#edit-customer-profile-shipping input', 'addClass', array('required'));
  }*/

  $commands[] = ajax_command_after('.main form', theme('status_messages'));

  // $commands[] = ajax_command_after('.'.$form['#attributes']['class'][1].':eq(0)',theme('status_messages'));
  return array('#type' => 'ajax', '#commands' => $commands);
}

/*
 * Добавляем метод доставки по умолчанию в новый заказ
 * для отображения строки доставки в форме чекаута.
 */
function custom_stepug_commerce_checkout_router($order, $checkout_page) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    // If this line item is a shipping line item...
    if ($line_item_wrapper->type->value() == 'shipping') {
      return;
    }
  }
  // Default shipping service
  $service_name = 'pickup';
  commerce_shipping_service_rate_order($service_name, $order);

  // Extract the unit price from the calculated rate.
  $rate_line_item = $order->shipping_rates[$service_name];
  $rate_line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $rate_line_item);
  $unit_price = $rate_line_item_wrapper->commerce_unit_price->value();

  // Create a new shipping line item with the calculated rate from the form.
  $line_item = commerce_shipping_line_item_new($service_name, $unit_price, $order->order_id, $rate_line_item->data, $rate_line_item->type);

  // Save and add the line item to the order.
  $new_line_item = commerce_shipping_add_shipping_line_item($line_item, $order, TRUE);
  commerce_order_save($order);

}

function custom_stepug_entity_load($entities, $type) {
  if ($type == 'search_api_page') {
    foreach ($entities as $entity) {
      $entity->options['per_page'] = 16;
    }
  }
}
function custom_stepug_entity_view($entity, $type, $view_mode, $langcode) {
  if (isset($entity->type) && $entity->type == 'commerce_order' && $view_mode == 'customer') {
    $statuses = commerce_order_status_options_list();
    $entity->content['order-status'] = array(
      '#markup' => '<div class="order-status"><label class="inline">Статус заказа: </label>
      <div class="order-status-value">' . $statuses['Оформление заказа'][$entity->status] .'</div></div>'
    );
    $entity->content['actions'] = array(
      '#type' => 'fieldset',
      '#attributes' => array(
        'class' => array('checkout-buttons'),
      ),
    );
    $entity->content['actions']['continue'] = array(
      '#markup' => l(t('Continue to next step'), '/checkout/' . $entity->order_id,
      array('attributes' => array(
        'class' => array('checkout-continue', 'form-submit', 'btn-lg')
      ))),
    );
    $entity->content['actions']['operator'] = array(
      '#markup' => '<span class="button-operator">или</span>',
    );
    $entity->content['actions']['transform_to_cart'] = array(
      '#markup' => l('Изменить заказ', '/transform_to_cart/' . $entity->order_id,
      array('attributes' => array(
        'class' => array('checkout-cancel', 'form-submit', 'btn-lg')
      )))
    );
  }
}
<<<<<<< HEAD
=======

/**
 * Implements hook_token_info(). This hook will register tow token lname and fname.
 */
function custom_stepug_token_info() {
  $info['tokens']['commerce-order']['email-order'] = array(
    'name' => t('Email order'),
    'description' => t('Order render for emails.'),
  );
  return $info;
}

/**
 * Implements hook_tokens(). This hook will operate the token and replace it with it's value.
 */
function custom_stepug_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  $sanitize = !empty($options['sanitize']);

  if ($type == 'commerce-order' && !empty($data['commerce-order'])) {
    $commerce_order = $data['commerce-order'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'email-order':
          $output = views_embed_view('order_for_email', 'block', $commerce_order->order_id);
          $replacements[$original] = $output;
          break;
      }
    }
  }

  return $replacements;
}
>>>>>>> ae4563c6a8c51c9966b97f8f2a10247d288d8eab
