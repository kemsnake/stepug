<?php

/**
* Implements hook_library().
*/
function custom_stepug_library() {
  $libraries['jquery_ui_spinner'] = array(
    'title' => 'jQuery Spinner',
    'website' => 'http://github.com/btburnett3/jquery.ui.spinner/',
    'version' => '1.8',
    'js' => array(
      libraries_get_path('jquery_ui_spinner') . '/ui.spinner.min.js' => array(),
    ),
    'css' => array(
      libraries_get_path('jquery_ui_spinner') . '/ui.spinner.css' => array(),
    ),
    'dependencies' => array(
      array('system', 'ui.widget'),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_menu().
 */
function custom_stepug_menu() {

  $items['robokassa/order/success'] = array(
    'title' => 'Successful payment',
    'page callback' => 'custom_stepug_robokassa_success',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['robokassa/order/fail'] = array(
    'title' => 'Unsuccessful payment',
    'page callback' => 'custom_stepug_robokassa_fail',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_menu().
 */
function custom_stepug_menu_alter(&$items) {
  $items['user/%user/ulogin']['access callback'] =  'user_access';
  $items['user/%user/ulogin']['access arguments'] = array('administer users');
  $items['user/%user/ulogin/delete']['access callback'] =  'user_access';
  $items['user/%user/ulogin/delete']['access arguments'] = array('administer users');
}

/**
 * Success page callback handler.
 */
function custom_stepug_robokassa_success() {
  $build = array();
  if (isset($_POST['InvId']) && isset($_POST['OutSum']) && isset($_POST['SignatureValue'])) {
    $message = t('Thank you, payment successful. Order #@shop_order,<br />', array('@shop_order' => $_POST['InvId']));
    drupal_set_message($message, 'status');
    global $user;
    if ($user->uid > 0) {
      drupal_goto('user/' . $user->uid . '/orders');
    }
    else {
      drupal_goto('');
    }
  }
  else {
    $build = MENU_ACCESS_DENIED;
  }
  return $build;
}

/**
 * Fail page callback handler.
 */
function custom_stepug_robokassa_fail() {
  drupal_set_message(t('Payment unsuccessful!'), 'error');
  drupal_goto('');
}

function custom_stepug_form_alter(&$form, &$form_state, $form_id) {
  if (strstr($form_id, 'commerce_cart_add_to_cart_form')) {
    $form['#attached']['library'][] = array('custom_stepug', 'jquery_ui_spinner');
    $form['quantity']['#title'] = '';
    $form['quantity']['#size'] = 1;
  }

  //Прячем кнопку поиска и делаем плэйсхолдер для поля поиска
  if ($form_id == 'views_exposed_form' && $form['#id'] == 'views-exposed-form-popular-products-page-3') {
    $form['title']['#attributes']['placeholder'] = t('Search');
    $form['title']['#size'] = 25;
  }

  // убираем форму поиска со стрнацы с результатами. мы изем только по названию товара
  if ($form_id == 'search_form') {
    $form['#access'] = FALSE;
  }

  // убираем форму поиска со стрнацы с результатами. мы изем только по названию товара
  if ($form_id == 'user_register_form' || ($form_id == 'user_profile_form' && $form['#user_category'] == 'account')) {
    // скрываем языковые настройки от обычных пользователей
    if (!user_access('administer users')) {
      $form['locale']['#access'] = FALSE;
    }
  }
}

/**
 * Implement hook_module_implements_alter().
 */
function custom_stepug_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    // выполняем нащ хук в самом конце
    $group = $implementations['custom_stepug'];
    unset($implementations['custom_stepug']);
    $implementations['custom_stepug'] = $group;
  }
}

/**
 * Implement hook_block_info().
 */
function custom_stepug_block_info() {
  $blocks = array();
  $blocks['stepug_user_links'] = array(
    'info' => t('Stepug user links block'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implement hook_block_view().
 */
function custom_stepug_block_view($delta = '') {
  global $user;

  $block = array();
  switch ($delta) {
    case 'stepug_user_links':
      if ($user->uid) {
        $block['content'] = l($user->name, 'user/' . $user->uid) .' | ' . l(t('My orders'), 'user/' . $user->uid . '/orders') .' | ' . l(t('Log out'), 'user/logout');
      }
      break;
  }
  return $block;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function custom_stepug_ctools_plugin_directory($module, $plugin) {
  if ($module == 'addressfield') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_node_view().
 */
function custom_stepug_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'product_display') {
    if (isset($node->field_product['und'][0]['product_id']) && user_access('edit any commerce product entity')) {
      $product_id = $node->field_product['und'][0]['product_id'];
      $node->content['field_product'][0]['edit_link'] = array(
        '#markup' => l(t('Edit product'), 'admin/commerce/products/' . $product_id . '/edit'),
        '#weight' => -1,
      );
    }
  }

}

function custom_stepug_commerce_checkout_page_info_alter(&$checkout_pages) {
  $checkout_pages['payment']['help'] = '<div class="checkout-help">' . t('Please wait. You will now be redirected to the payment server. If you are not redirected within 10 seconds, please click on the button below.') . '</div>';
}

/**
 * Invoked after a feed item has been saved.
 *
 * @param FeedsSource $source
 *  FeedsSource object that describes the source that is being imported.
 * @param $entity
 *   The entity object that has just been saved.
 * @param array $item
 *   The parser result for this entity.
 * @param int|null $entity_id
 *  The id of the current item which is going to be updated. If this is a new
 *  item, then NULL is passed.
 */
function custom_stepug_feeds_after_save(FeedsSource $source, $entity, $item, $entity_id) {
  global $user;
  // Product display
  $node = (object)array('type' => 'product_display');
  node_object_prepare($node);
  $node->title = $entity->title;
  $node->uid = $user->uid;
  $node->status = 0;
  $node->field_product[LANGUAGE_NONE][]['product_id'] = $entity->product_id;
  $node->language = LANGUAGE_NONE;
  node_save($node);
}